name: Scan Dependabot alerts and notify via Slack
description: Reads the Dependabot alerts of a repository and sends a Slack notification.

inputs:
  TOKEN:
    required: true
    description: GitHub token granting read access to Dependabot alerts in target repo
  SLACK_WEBHOOK_URL:
    required: true
    description: Slack notification target
  CRITICAL:
    required: false
    default: "true"
    description: Send notification for alerts of critical severity
  HIGH:
    required: false
    default: "true"
    description: Send notification for alerts of high severity
  MEDIUM:
    required: false
    default: "true"
    description: Send notification for alerts of medium severity
  LOW:
    required: false
    default: "true"
    description: Send notification for alerts of low severity

runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Get Dependabot alerts
      id: get-alerts
      shell: python
      env:
        TOKEN: ${{ inputs.TOKEN }}
        REPOSITORY: ${{ github.repository }}
        OUTPUT_KEY: alerts
        CRITICAL: ${{ inputs.CRITICAL }}
        HIGH: ${{ inputs.HIGH }}
        MEDIUM: ${{ inputs.MEDIUM }}
        LOW: ${{ inputs.LOW }}
      run: |
        import os
        import requests
        import uuid
        import sys

        GITHUB_TOKEN = os.getenv("TOKEN")
        REPOSITORY = os.getenv("REPOSITORY")
        OUTPUT_KEY = os.getenv("OUTPUT_KEY")

        severities = (
            "critical" if os.getenv("CRITICAL", "true").lower() == "true" else None,
            "high" if os.getenv("HIGH", "true").lower() == "true" else None,
            "medium" if os.getenv("MEDIUM", "true").lower() == "true" else None,
            "low" if os.getenv("LOW", "true").lower() == "true" else None,
        )


        def set_multiline_output(name, value):
            with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
                delimiter = uuid.uuid1()
                print(f"{name}<<{delimiter}", file=fh)
                print(value, file=fh)
                print(delimiter, file=fh)


        headers = {
            "Authorization": f"Bearer {GITHUB_TOKEN}",
            "Accept": "application/vnd.github+json",
        }
        response = requests.get(
            f"https://api.github.com/repos/{REPOSITORY}/dependabot/alerts",
            headers=headers,
        )


        if response.status_code == 200:
            alerts = [
                {
                    "summary": alert["security_advisory"]["summary"],
                    "url": alert["html_url"],
                    "severity": alert["security_advisory"]["severity"],
                }
                for alert in response.json()
                if alert["state"] == "open"
                and alert["security_advisory"]["severity"] in severities
            ]

            if len(alerts) > 0:
                output_string = "\n".join(
                    [
                        f'{alert["summary"]} (*{alert["severity"].upper()}*): {(alert["url"])}'
                        for alert in alerts
                    ]
                )
                set_multiline_output(OUTPUT_KEY, output_string)
                sys.exit(1)
        else:
            print(f"Getting Dependabot alerts failed with status code {response.status_code}")

    - name: Notify Slack
      if: failure()
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.SLACK_WEBHOOK_URL }}
      with:
        status: failure
        fields: repo, job, took
        text: |
          *Dependabot alerts:*
          ${{steps.get-alerts.outputs.alerts}}
