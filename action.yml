name: Scan Dependabot alerts and notify via Slack
description: Reads the Dependabot alerts of a repository and sends a Slack notification.

inputs:
  TOKEN:
    required: true
    description: GitHub token granting read access to Dependabot alerts in target repo
  SLACK_WEBHOOK_URL:
    required: true
    description: Slack notification target
  CRITICAL_ONLY:
    required: false
    default: "false"
    description: Send notification only for alerts of critical severity

runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Get Dependabot alerts
      id: get-alerts
      shell: python
      env:
        TOKEN: ${{ inputs.TOKEN }}
        REPOSITORY: ${{ github.repository }}
        OUTPUT_KEY: alerts
        CRITICAL_ONLY: ${{ inputs.CRITICAL_ONLY }}
      run: |
        import os
        import requests
        import uuid
        import sys

        GITHUB_TOKEN = os.getenv("TOKEN")
        REPOSITORY = os.getenv("REPOSITORY")
        CRITICAL_ONLY = os.getenv("CRITICAL_ONLY")
        OUTPUT_KEY = os.getenv("OUTPUT_KEY")


        def set_multiline_output(name, value):
            with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
                delimiter = uuid.uuid1()
                print(f"{name}<<{delimiter}", file=fh)
                print(value, file=fh)
                print(delimiter, file=fh)


        headers = {
            "Authorization": f"Bearer {GITHUB_TOKEN}",
            "Accept": "application/vnd.github+json",
        }

        response = requests.get(
            f"https://api.github.com/repos/{REPOSITORY}/dependabot/alerts",
            headers=headers,
        )

        if response.status_code == 200:
            alerts = (
                [
                    {
                        "summary": alert["security_advisory"]["summary"],
                        "url": alert["url"],
                        "severity": alert["security_advisory"]["severity"],
                    }
                    for alert in response.json()
                    if alert["state"] == "open"
                ]
                if not CRITICAL_ONLY == "true"
                else [
                    {
                        "summary": alert["security_advisory"]["summary"],
                        "url": alert["url"],
                        "severity": alert["security_advisory"]["severity"],
                    }
                    for alert in response.json()
                    if alert["state"] == "open"
                    and alert["security_advisory"]["severity"] == "critical"
                ]
            )

            if len(alerts) > 0:
                output_string = "\n".join(
                    [
                        f'{alert["summary"]} ({alert["severity"]}): {(alert["url"])}'
                        for alert in alerts
                    ]
                )
                set_multiline_output(OUTPUT_KEY, output_string)
                sys.exit(1)

        else:
            print(f"Getting Dependabot alerts failed with status code {response.status_code}")

    - name: Notify Slack
      if: failure()
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.SLACK_WEBHOOK_URL }}
      with:
        status: failure
        text: |
          Dependabot alerts in ${{ github.repository }}:
          ${{steps.get-alerts.outputs.alerts}}
