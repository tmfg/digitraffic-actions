name: 'ECS Service Update action'
description: 'Updates ECS Service'

inputs:
  cluster-name:
    description: 'Cluster to update'
    required: true
  service-name:
    description: 'Task service name'
    required: true
  aws-role:
    description: 'AWS Role to assume'
    required: true
  aws-region:
    description: 'AWS_REGION secret'
    required: true
  revision:
    description: 'Revision to install'
    required: false
    default: '0'
  desired-count:
    description: 'Desired count of service running'
    required: false
    default: '1'
  deployment-configuration:
    description: 'Configuration for deployment'
    required: false
    default: 'maximumPercent=200,minimumHealthyPercent=100'

runs:
  using: composite
  steps:
    - name: Print parameters
      run: echo Updating ecs service task ${{ inputs.service-name }} to revision ${{ inputs.revision }} with desired count ${{ inputs.desired-count }}
      shell: bash
    - name: Check parameters
      if: inputs.revision != '0' && inputs.desired-count == '0'
      uses: actions/github-script@v3
      with:
        script: |
          core.setFailed('When desired-count is 0, you must not specify revision!')
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ inputs.aws-role }}
        role-session-name: gh-actions-update-ecs-history-${{ inputs.service-name }}
        aws-region: ${{ inputs.aws-region }}
    - name: Stop task
      if: inputs.desired-count == 0
      run: |
        aws ecs update-service --cluster ${{ inputs.cluster-name }} \
          --service ${{ inputs.service-name }}-service \
          --desired-count 0
        while [ $(aws ecs list-tasks --cluster ${{ inputs.cluster-name }} --service-name ${{ inputs.service-name }}-service | jq '.taskArns | length') -gt 0 ]; do echo 'Waiting'; sleep 1; done
      shell: bash
    - name: Set up task definition parameter
      use: |
        TASK_DEFINITION=--task-definition ${{ inputs.service-name }}
        echo "TASK_DEFINITION=$TASK_DEFINITION" >> $GITHUB_ENV
    - name: Don't use revision
      if: inputs.revision != '0'
      run: |
        TASK_DEFINITION=${{ env.TASK_DEFINITION }}:${{ inputs.revision }}
        echo "TASK_DEFINITION=$TASK_DEFINITION" >> $GITHUB_ENV
    - name: Update task definition
      if: inputs.desired-count != 0
      run: |
        aws ecs update-service --cluster ${{ inputs.cluster-name }} \
          --service ${{ inputs.service-name }}-service \
          --task-definition ${{ env.TASK_DEFINITION }} \
          --deployment-configuration ${{ inputs.deployment-configuration }} \
          --desired-count ${{ inputs.desired-count }}
      shell: bash
